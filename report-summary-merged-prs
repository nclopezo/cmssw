#! /usr/bin/env python

from optparse import OptionParser
import subprocess
import re
import json
import pickle
from pickle import Unpickler
#-----------------------------------------------------------------------------------
#---- Parser Options
#-----------------------------------------------------------------------------------
parser = OptionParser(usage="usage: %prog REPO COMPARISON_PAIRS" 
                            "\n REPO: location of the repository."
			    "\n for example: cmssw.git or /afs/cern.ch/cms/git-cmssw-mirror/cmssw.git"
                            "\n COMPARISON_PAIRS: a list separated by commas with the pairs of tags or "
			    "\n heads or branches that you want to compare, this pairs should be separated by .."
                            "\n For example:"
			    "\n CMSSW_7_1_0_pre2..CMSSW_7_0_X,CMSSW_6_2_7..CMSSW_6_2_X")

(options, args) = parser.parse_args()

#-----------------------------------------------------------------------------------
#---- Review of arguments
#-----------------------------------------------------------------------------------

if (len(args)<2):
  print 'not enough arguments\n'
  parser.print_help()
  exit()

repo = args[0]
requested_comparisons_param = args[1]

requested_comparisons = requested_comparisons_param.split(",")

#-----------------------------------------------------------------------------------
#---- Fuctions
#-----------------------------------------------------------------------------------

def get_pr_number(line_parts):
  number_and_name = line_parts[0].replace('"','')
  number = re.sub(' from .*', '', number_and_name)
  number = re.sub('Merge pull request #', '', number)
  return number

def get_pr_author_login(line_parts):
  number_and_name = line_parts[0].replace('"','')
  name = re.sub('^Merge .* from ', '', number_and_name)
  name = name.split('/')[0]
  return name

def get_pr_title(line_parts):
  title = line_parts[1].replace('"','').strip()
  return title

#gets the information of the pull request
def get_info_pr(line):
  pull_request = {}
  line_parts = line.split(',')
  pull_request['number'] = get_pr_number(line_parts)
  pull_request['author_login'] = get_pr_author_login(line_parts)
  pull_request['title'] = get_pr_title(line_parts)
  pull_request['url'] = 'https://github.com/cms-sw/cmssw/pull/%d' % int(pull_request['number'])
  return pull_request

#reads a line of the output of git log and returns the tags that it contains
#if there are no tags it returns an empty list
#it applies filters according to the release queue to only get the 
#tags related to the current release queue
def get_tags_from_line(line, release_queue):
  if 'tags->' not in line:
    return []
  tags_str = line.split('tags->')[1]
  if 'SLHC' in release_queue:
    filter = release_queue[:-6]+'[X|0-9]_SLHC.*'
  else:
    filter = release_queue[:-1]+'[X|0-9].*'

  ## if the tags part is equal to ," there are no tags
  if tags_str != ',"':
    tags = tags_str.split(',',1)[1].strip().replace('(','').replace(')','').split(',')
    #remove te word "tag: "
    tags = [t.replace('tag: ','') for t in tags ]
    #I also have to remove the branch name because it otherwise will always appear
    tags = [t for t in tags if re.match(filter,t.strip()) and t.strip().replace('"','') != release_queue]
    return [t.replace('"','').replace('tag:','').strip() for t in tags]
  else:
    return []


#-----------------------------------------------------------------------------------
#---- Fuctions -- Analize Git ouputs
#-----------------------------------------------------------------------------------

def determine_build_error(nErrorInfo):
  a = BuildResultsKeys.COMP_ERROR in nErrorInfo.keys()
  b = BuildResultsKeys.LINK_ERROR in nErrorInfo.keys()
  c = BuildResultsKeys.MISC_ERROR in nErrorInfo.keys()
  d = BuildResultsKeys.DWNL_ERROR in nErrorInfo.keys()
  e = BuildResultsKeys.DICT_ERROR in nErrorInfo.keys()
  f = BuildResultsKeys.PYTHON_ERROR in nErrorInfo.keys()
  return a or b or c or d or e or f

def determine_build_warning(nErrorInfo):
  return BuildResultsKeys.COMP_WARNING in nErrorInfo.keys()

def get_results_one_addOn_file(file):
  look_for_err_cmd = 'grep "failed" %s' %file
  result,err,ret_code = get_output_command(look_for_err_cmd)
  if '0 failed' in result:
    return True
  else:
    return False

def get_results_one_unitTests_file(file):
  look_for_err_cmd = 'grep "ERROR" %s' %file
  result,err,ret_code = get_output_command(look_for_err_cmd)

  if result != '':
    return PossibleUnitTestResults.FAILED
  else:
    return PossibleUnitTestResults.PASSED

def get_results_one_relval_file(file):
  read_last_line_command = 'tail -n1 %s' %file
  
  out,err,ret_code = get_output_command(read_last_line_command)
  
  if 'SLHC' in file:
    if '0 0 0 0 failed' in out:
      return True
    else:
      return False

  if '0 0 0 0 0 failed' in out:
    return True
  else:
    return False

def get_results_one_build_file(file):
  summFile = open(file,'r')
  pklr = Unpickler(summFile)
  [rel, plat, anaTime]   = pklr.load()
  errorKeys   = pklr.load()
  nErrorInfo  = pklr.load()
  summFile.close()

  if determine_build_error(nErrorInfo):
    return PossibleBuildResults.ERROR
  elif determine_build_warning(nErrorInfo):
    return PossibleBuildResults.WARNING
  else:
    return PossibleBuildResults.PASSED

  return True

def analyze_tests_results(output,results,arch,type):
  for line in output.splitlines():
    m = re.search('CMSSW.*[0-9]/', line)
    rel_name = line[m.start():m.end()-1]
    result_arch = {}
    result_arch['arch'] = arch
    result_arch['file'] = line
    if type == 'relvals':
      passed = get_results_one_relval_file(line)
    elif type == 'utests':
      passed = get_results_one_unitTests_file(line)
    elif type == 'addOn':
      passed = get_results_one_addOn_file(line)
    elif type == 'builds':
      passed = get_results_one_build_file(line)
    else:
      print 'not a valid test type %s' %type
      exit(1)

    result_arch['passed'] = passed

    if rel_name not in results.keys():
      results[rel_name] = []
      
    results[rel_name].append(result_arch)
 

def get_tags(output,release_queue):
  tags = []
  for line in output.splitlines():
    tags += get_tags_from_line(line, release_queue)

  if (len(tags) ==0):
    print "ATTENTION:"
    print "looks like %s has not changed between the tags specified!" % release_queue
    command_to_execute = MAGIC_COMMAND_FIND_FIRST_MERGE_WITH_TAG.replace('END_TAG',release_queue)
    out,err,ret_code = get_output_command(command_to_execute)
    print out
    tags = get_tags_from_line(out, release_queue)
    print tags

  return tags

#returns the number of the day of a tag
#if it is not an IB tag, it returns -1
def get_day_number_tag(tag):
  parts = tag.split("-")
  if len(parts) == 1:
    return -1
  else:
    day = parts[2]
    try:
        return int(day)
    except ValueError:
        return -1


# uses some heuristics to tell if the list of tags seems to be too short
def is_tag_list_suspicious(tags):
  if len(tags) < 7:
    return True
  day_first_tag = get_day_number_tag(tags[-1])
  day_second_tag = get_day_number_tag(tags[-2])
  return day_second_tag-day_first_tag > 1
  
# determines if  the error is because one of the tags does not exist
# this can happen when the branch that is being analyzed has been 
# created recently
def is_recent_branch(err):
  return "unknown revision or path not in the working tree" in err

#-----------------------------------------------------------------------------------
#---- Fuctions -- Execute Magic commands
#-----------------------------------------------------------------------------------

# this calls the git log command with the first tag to look for missing
# tags that were not found previously
def look_for_missing_tags(start_tag, release_queue):
  command_to_execute = MAGIC_COMMAND_FIND_FIRST_MERGE_WITH_TAG.replace('END_TAG',start_tag)
  out,err,ret_code = get_output_command(command_to_execute)
  tags = get_tags_from_line(out, release_queue)
  return tags

# Executes the command that is given as parameter, returns a tuple out,err,ret_code
# with the output, error and return code obtained
def get_output_command(command_to_execute):
  print 'Executing:'
  print command_to_execute

  p = subprocess.Popen(command_to_execute, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  out,err = p.communicate()
  ret_code = p.returncode

  if ret_code != 0:
    print ret_code
    print 'Error:'
    print err

  return out,err,ret_code

# Gets the tags between start_tag and end_tag, the release_queue is used as a filter
# to ignore tags that are from other releases
def execute_magic_command_tags(start_tag,end_tag,release_queue):
  tags = []
  command_to_execute = MAGIC_COMMAND_TAGS.replace('START_TAG',start_tag).replace('END_TAG',end_tag)
  out,err,ret_code = get_output_command(command_to_execute)

  # check if the end_tag exists, but the start_tag doesn't
  # this could mean that the release branch has been created recently
  if ret_code != 0:
    if is_recent_branch(err):
      print 'looks like this branch has been created recently'
      command_to_execute = MAGIC_COMMAND_FIND_ALL_TAGS.replace('END_TAG',end_tag).replace('RELEASE_QUEUE',release_queue)
      out,err,ret_code = get_output_command(command_to_execute)

  tags = get_tags(out,release_queue)
  tags.append(start_tag)

  #check if the tags list could be missing tags
  # this means that the release branch has not changed much from the start_tag
  if is_tag_list_suspicious(tags):
    print 'this list could be missing something!'
    print tags
    new_tags = look_for_missing_tags(start_tag, release_queue)
    tags.pop()
    tags += new_tags    

  tags = [t for t in reversed(tags)]
  print tags
  return tags

def execute_command_compare_tags(start_tag,end_tag):
  command_to_execute = MAGIC_COMMAND_PRS.replace('START_TAG',start_tag).replace('END_TAG',end_tag)
  output,err,ret_code = get_output_command(command_to_execute)
  print '------'
  comp = {}
  comp['compared_tags'] = '%s-->%s' % (start_tag,end_tag)
  prs = []
  for line in output.splitlines():
    pr = get_info_pr(line)
    prs.append(pr)
  comp['merged_prs'] = prs
  return comp

def compare_tags(tags):
  comparisons = []
  for i in range(len(tags)-1):
    comp = execute_command_compare_tags(tags[i],tags[i+1])
    comparisons.append(comp)
  return comparisons


def execute_magic_command_find_results(results,type):
  for arch in ARCHITECTURES:
    if type == 'relvals':
      base_command = MAGIC_COMMAD_FIND_RESULTS_RELVALS
    elif type == 'utests':
      base_command = MAGIC_COMMAND_FIND_RESULTS_UNIT_TESTS
    elif type == 'addOn':
      base_command = MAGIC_COMMAND_FIND_RESULTS_ADDON
    elif type == 'builds':
      base_command = MAGIC_COMMAND_FIND_RESULTS_BUILD
    else:
      print 'not a valid test type %s' %type
      exit(1)

    command_to_execute = base_command.replace('ARCHITECTURE',arch)
    out,err,ret_code = get_output_command(command_to_execute)
    analyze_tests_results(out,results,arch,type)


def print_results(results):
  print "Results:"
  print
  print
  for rq in results:
    print
    print rq['release_name']
    print '/////////////////////////'
    for comp in rq['comparisons']:
      print comp['compared_tags']

      print '\t' + 'HLT Tests: ' + comp['hlt_tests']

      print '\t' + 'Static Checks: ' + comp['static_checks']

      builds_results = [res['arch']+':'+str(res['passed']) for res in comp['builds'] ]
      print '\t' + 'Builds:'+ str(builds_results)

      relvals_results = [res['arch']+':'+str(res['passed']) for res in comp['relvals'] ]
      print '\t' + 'RelVals:'+ str(relvals_results)

      utests_results = [res['arch']+':'+str(res['passed']) for res in comp['utests'] ]
      print '\t' + 'UnitTests:' + str(utests_results)

      addons_results = [res['arch']+':'+str(res['passed']) for res in comp['addons'] ]
      print '\t' + 'AddOns:' + str(addons_results)

      merged_prs = [pr['number'] for pr in comp['merged_prs']]
      print '\t' + 'PRs:' + str(merged_prs)

def add_tests_to_results(results, unit_tests, relvals_results,addon_results, build_results):
  for rq in results:
    for comp in rq['comparisons']:
      rel_name = comp['compared_tags'].split('-->')[1]
      rvsres = relvals_results.get(rel_name)
      utres = unit_tests.get(rel_name)
      adonres = addon_results.get(rel_name)
      buildsres = build_results.get(rel_name)

      comp['relvals'] = rvsres if rvsres else []
      comp['utests'] = utres if utres else []
      comp['addons'] = adonres if adonres else []
      comp['builds'] = buildsres if buildsres else []

      a = [t['arch'] for t in utres] if utres else []
      b = [t['arch'] for t in rvsres] if rvsres else []
      c = [t['arch'] for t in buildsres] if buildsres else []

      not_complete_archs =  [arch for arch in c if arch not in a]
      for nca in not_complete_archs:
        result = {}
        result['arch'] = nca
        result['file'] = str([res['file'] for res in buildsres if res['arch'] == nca])
        result['passed'] = PossibleUnitTestResults.UNKNOWN
        comp['utests'].append(result)

      comp['tests_archs'] = list(set(a+b+c))

def find_static_results(comparisons):
  for comp in comparisons:
    rel_name = comp['compared_tags'].split('-->')[1]
    comp['static_checks'] = find_one_static_check(rel_name) 

def find_hlt_tests_results(comparisons):
  for comp in comparisons:
    rel_name = comp['compared_tags'].split('-->')[1]
    comp['hlt_tests'] = find_one_hlt_test(rel_name)

def find_one_static_check(release_name):
  command_to_execute = MAGIC_COMMAND_FIND_STATIC_CHECKS.replace('RELEASE_NAME',release_name)
  command_to_execute = command_to_execute.replace('ARCHITECTURE','slc5_amd64_gcc481')
  out,err,ret_code = get_output_command(command_to_execute)
  if '200 OK' in out:
    return STATIC_CHECKS_URL.replace('RELEASE_NAME',release_name).replace('ARCHITECTURE','slc5_amd64_gcc481')
  else:
    #If I don't find it in slc5 I look for it in slc6
    print 'looking for resuls in slc6'
    command_to_execute = command_to_execute.replace('slc5_amd64_gcc481','slc6_amd64_gcc481')
    out,err,ret_code = get_output_command(command_to_execute)
    if '200 OK' in out:
      print 'results found for slc6'
      return STATIC_CHECKS_URL.replace('RELEASE_NAME',release_name).replace('ARCHITECTURE','slc6_amd64_gcc481')
    else:
      return ''

def find_one_hlt_test(release_name):
  command = MAGIC_COMMAND_FIND_HLT_TESTS.replace('RELEASE_NAME',release_name)
  out,err,ret_code = get_output_command(command)
  if '200 OK' in out:
    return HLT_TESTS_URL.replace('RELEASE_NAME',release_name)
  else:
    return ''

#-----------------------------------------------------------------------------------
#---- Start of execution
#-----------------------------------------------------------------------------------

# I used this type of concatenation because the string has %s inside
MAGIC_COMMAND_PRS  = 'GIT_DIR='+repo+' git log --merges  --pretty=\'"%s", "%b", "tags->,%d"\' START_TAG..END_TAG | grep "Merge pull"'

MAGIC_COMMAND_FIND_FIRST_MERGE_WITH_TAG = 'GIT_DIR='+repo+' git log --merges  --pretty=\'"%s", "%b", "tags->,%d"\' END_TAG | grep "tags->" | head -n1'

MAGIC_COMMAD_FIND_RESULTS_RELVALS  = 'find /afs/cern.ch/cms/sw/ReleaseCandidates/ARCHITECTURE/www -name runall-report-step123-.log'

MAGIC_COMMAND_TAGS = 'GIT_DIR='+repo+' git log --merges  --pretty=\'"%s", "%b", "tags->,%d"\' START_TAG..END_TAG | grep -E "Merge [pull|remote]"'

MAGIC_COMMAND_FIND_RESULTS_UNIT_TESTS = 'find /afs/cern.ch/cms/sw/ReleaseCandidates/ARCHITECTURE/www -name unitTests-summary.log'

MAGIC_COMMAND_FIND_RESULTS_ADDON  = 'find /afs/cern.ch/cms/sw/ReleaseCandidates/ARCHITECTURE/www -name addOnTests.log'

MAGIC_COMMAND_FIND_RESULTS_BUILD = 'find /afs/cern.ch/cms/sw/ReleaseCandidates/ARCHITECTURE/www -name logAnalysis.pkl'

STATIC_CHECKS_URL = 'https://cmssdt.cern.ch/SDT/jenkins-artifacts/ib-static-analysis/RELEASE_NAME/ARCHITECTURE/llvm-analysis/index.html'

HLT_TESTS_URL = 'https://cmssdt.cern.ch/SDT/jenkins-artifacts/HLT-Validation/RELEASE_NAME/' 

MAGIC_COMMAND_FIND_STATIC_CHECKS = 'curl -s -k --head %s | head -n 1' % STATIC_CHECKS_URL

MAGIC_COMMAND_FIND_HLT_TESTS = 'curl -s -k --head %s | head -n 1' % HLT_TESTS_URL

ARCHITECTURES = ['slc5_amd64_gcc462','slc6_amd64_gcc472','slc5_amd64_gcc472','slc5_amd64_gcc481','slc6_amd64_gcc481','slc6_amd64_gcc490','slc6_mic_gcc481','osx108_amd64_gcc481']

SPECIAL_RELEASES = ['SLHC','BOOSTIO','ROOT6','THREADED','GEANT10','DEVEL','CLANG','DEBUG']

SP_REL_REGEX = "|".join(SPECIAL_RELEASES)

MAGIC_COMMAND_FIND_ALL_TAGS ='GIT_DIR='+repo+' git log --merges  --pretty=\'"%s", "%b", "tags->,%d"\' END_TAG | grep -E "Merge [pull|remote]" | grep -E "RELEASE_QUEUE"'

class BuildResultsKeys:
  DICT_ERROR = 'dictError'
  COMP_ERROR = 'compError'
  LINK_ERROR = 'linkError'
  COMP_WARNING = 'compWarning'
  DWNL_ERROR = 'dwnlError'
  MISC_ERROR = 'miscError'
  IGNORE_WARNING = 'ignoreWarning'
  PYTHON_ERROR = 'pythonError'

class PossibleBuildResults:
  PASSED = 'passed'
  WARNING = 'warning'
  ERROR = 'error'

class PossibleUnitTestResults:
  PASSED = 'passed'
  FAILED = 'failed'
  UNKNOWN = 'unknown'

results = []

for comp in requested_comparisons:
  start_tag = comp.split("..")[0]
  end_tag = comp.split("..")[1]
  release_queue = start_tag
  # if is a SLHC or any special release, the split will happen with the fifth underscore _
  if re.search(SP_REL_REGEX,release_queue):
    print 'This is a special release'
    release_queue = re.match(r'^((?:[^_]*_){%d}[^_]*)_(.*)' % (4), release_queue).groups()[0]
  else:
    release_queue = re.match(r'^((?:[^_]*_){%d}[^_]*)_(.*)' % (3), release_queue).groups()[0]

  print "I will analyze %s from %s to %s:" % (release_queue,start_tag,end_tag)

  release_queue_results = {}
	
  release_queue_results['release_name'] = release_queue

  tags = execute_magic_command_tags(start_tag,end_tag,release_queue)

  release_queue_results['comparisons'] = compare_tags(tags)

  find_static_results(release_queue_results['comparisons'])
  find_hlt_tests_results(release_queue_results['comparisons'])

  results.append(release_queue_results)
	
  print 
  print "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"

build_results = {}

execute_magic_command_find_results(build_results,'builds')

relvals_results = {}

execute_magic_command_find_results(relvals_results,'relvals')

unit_tests_results = {}

execute_magic_command_find_results(unit_tests_results,'utests')

addOn_tests_results = {}

execute_magic_command_find_results(addOn_tests_results,'addOn')

add_tests_to_results(results, unit_tests_results, relvals_results,addOn_tests_results, build_results)
print_results(results)

out_json = open("merged_prs_summary.json", "w")
json.dump(results,out_json,indent=4)
out_json.close()
